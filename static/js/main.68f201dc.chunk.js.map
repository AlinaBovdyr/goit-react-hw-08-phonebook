{"version":3,"sources":["components/Container/Container.module.css","redux/contacts/actions.js","components/AppBar/Navigation.module.css","redux/contacts/reducer.js","redux/store.js","Router/routes.js","components/AppBar/Navigation.js","components/AppBar/AuthNav.js","img/default-avatar.png","components/AppBar/UserMenu.js","components/AppBar/AppBar.js","Router/PrivateRoute.js","Router/PublicRoute.js","Router/Router.js","components/Container/Container.js","App.js","index.js","redux/auth/auth-actions.js","redux/auth/auth-operations.js","redux/auth/auth-reducer.js","redux/auth/auth-selectors.js"],"names":["module","exports","fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","changeSorting","items","createReducer","_","payload","state","filter","id","sorter","loading","error","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","authPersistConfig","key","storage","whitelist","store","configureStore","reducer","auth","persistReducer","authReducer","contacts","contactsReducer","devTools","process","persistor","persistStore","connect","isAuthenticated","authSelectors","getIsAuthenticated","to","routes","exact","className","s","link","activeClassName","activeLink","AuthNav","mapDispatchToProps","onLogout","authOperations","logout","name","getUserName","avatar","defaultAvatar","userMenu","src","alt","headerBtn","type","onClick","header","Component","component","redirectTo","routeProps","render","props","restricted","HomeView","lazy","RegisterView","LoginView","ContactsView","Router","fallback","path","Container","children","section","mainContainer","App","this","onRefresh","getCurrentUser","ReactDOM","StrictMode","document","getElementById","registerRequest","registerSuccess","registerError","loginRequest","loginSuccess","loginError","logoutRequest","logoutSuccess","logoutError","getCurrentUserRequest","getCurrentUserSuccess","getCurrentUserError","axios","defaults","baseURL","token","headers","common","Authorization","register","credentials","dispatch","a","authActions","post","data","message","login","getState","persistedToken","get","console","log","initialUserState","email","setUser","user","setToken","setError","getError"],"mappings":"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","file":"static/js/main.68f201dc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"colors\":\"'../../styles/variables/colors.css'\",\"mainColor\":\"#0b2630\",\"mainContainer\":\"Container_mainContainer__1i2mt\",\"section\":\"Container_section__32cGE\",\"container\":\"Container_container__2OXeW\",\"titleWrapper\":\"Container_titleWrapper__3f69r\",\"mainTitle\":\"Container_mainTitle__blb2e\",\"childContainer\":\"Container_childContainer__3NmLo\",\"appear\":\"Container_appear__1QiSn\",\"appearActive\":\"Container_appearActive__2bEnQ\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactRequest = createAction('contacts/fetchContactRequest');\r\nexport const fetchContactSuccess = createAction('contacts/fetchContactSuccess');\r\nexport const fetchContactError = createAction('contacts/fetchContactError');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\nexport const deleteContactRequest = createAction('contacts/deleteContactRequest');\r\nexport const deleteContactSuccess = createAction('contacts/deleteContactSuccess');\r\nexport const deleteContactError = createAction('contacts/deleteContactError');\r\n\r\nexport const changeFilter = createAction('contacts/ChangeFilter');\r\nexport const changeSorting = createAction('contacts/ChangeSorting');","// extracted by mini-css-extract-plugin\nmodule.exports = {\"colors\":\"'../../styles/variables/colors.css'\",\"bgColor\":\"tomato\",\"accentColor\":\"#19c98a\",\"activeBtnColor\":\"#712375\",\"header\":\"Navigation_header__Kium1\",\"link\":\"Navigation_link__18bBj\",\"activeLink\":\"Navigation_activeLink__hGKfi\",\"userMenu\":\"Navigation_userMenu__2VqQR\",\"headerBtn\":\"Navigation_headerBtn__1rKNO\",\"avatar\":\"Navigation_avatar__3jkMw\"};","import { combineReducers } from \"redux\";\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n    addContactRequest, \r\n    addContactSuccess, \r\n    addContactError, \r\n    deleteContactRequest, \r\n    deleteContactSuccess, \r\n    deleteContactError,\r\n    fetchContactRequest, \r\n    fetchContactSuccess, \r\n    fetchContactError,\r\n    changeFilter, \r\n    changeSorting\r\n} from './actions';\r\n\r\nconst items = createReducer([], {\r\n    [fetchContactSuccess]: (_, {payload}) => payload,\r\n    [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n    [deleteContactSuccess]: (state, { payload }) => state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n    [changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nconst sorter = createReducer('date', {\r\n    [changeSorting]: (_, { payload }) => payload,\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n    [fetchContactRequest]: () => true,\r\n    [fetchContactSuccess]: () => false,\r\n    [fetchContactError]: () => false,\r\n    [addContactRequest]: () => true,\r\n    [addContactSuccess]: () => false,\r\n    [addContactError]: () => false,\r\n    [deleteContactRequest]: () => true,\r\n    [deleteContactSuccess]: () => false,\r\n    [deleteContactError]: () => false,\r\n});\r\n\r\nconst error = createReducer(null, {\r\n    [fetchContactError]: (_, { payload }) => payload,\r\n    [addContactError]: (_, { payload }) => payload,\r\n    [deleteContactError]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n    items,\r\n    filter,\r\n    sorter,\r\n    loading,\r\n    error,\r\n});","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport {\r\n    persistStore,\r\n    persistReducer,\r\n    FLUSH,\r\n    REHYDRATE,\r\n    PAUSE,\r\n    PERSIST,\r\n    PURGE,\r\n    REGISTER\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport logger from 'redux-logger';\r\nimport contactsReducer from './contacts/reducer';\r\nimport { authReducer } from './auth';\r\n\r\nconst middleware = [\r\n    ...getDefaultMiddleware({\r\n        serializableCheck: {\r\n            ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]\r\n        }\r\n    }),\r\n    logger\r\n];\r\n\r\nconst authPersistConfig = {\r\n    key: 'auth',\r\n    storage,\r\n    whitelist: ['token'],\r\n};\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        auth: persistReducer(authPersistConfig, authReducer),\r\n        contacts: contactsReducer,\r\n    },\r\n    middleware,\r\n    devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport default {store, persistor};","export default {\r\n    home: '/',\r\n    register: '/register',\r\n    login: '/login',\r\n    contacts: '/contacts',\r\n};","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { authSelectors } from '../../redux/auth';\r\nimport routes from '../../Router/routes';\r\nimport s from './Navigation.module.css';\r\n\r\nconst Navigation = ({isAuthenticated}) => {\r\n    return (\r\n        <nav>\r\n            <NavLink to={routes.home} exact className={s.link} activeClassName={s.activeLink}>\r\n                Homepage\r\n            </NavLink>\r\n\r\n            {isAuthenticated &&\r\n                <NavLink\r\n                    to={routes.contacts}\r\n                    exact\r\n                    className={s.link}\r\n                    activeClassName={s.activeLink}\r\n                >\r\n                    Contacts\r\n                </NavLink>\r\n            }\r\n        </nav>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAuthenticated: authSelectors.getIsAuthenticated(state)\r\n});\r\n\r\nexport default connect(mapStateToProps)(Navigation);","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport routes from '../../Router/routes';\r\nimport s from './Navigation.module.css';\r\n\r\nconst AuthNav = () => {\r\n    return (\r\n        <div>\r\n            <NavLink\r\n                to={routes.register}\r\n                exact\r\n                className={s.link}\r\n                activeClassName={s.activeLink}\r\n            >\r\n                Registration\r\n            </NavLink>\r\n            <NavLink\r\n                to={routes.login}\r\n                exact\r\n                className={s.link}\r\n                activeClassName={s.activeLink}\r\n            >\r\n                Login\r\n            </NavLink>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AuthNav;","export default __webpack_public_path__ + \"static/media/default-avatar.49abd8f3.png\";","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { authSelectors, authOperations } from '../../redux/auth';\r\nimport defaultAvatar from '../../img/default-avatar.png';\r\nimport s from './Navigation.module.css';\r\n\r\nconst UserMenu = ({avatar, name, onLogout}) => {\r\n    return (\r\n        <div className={s.userMenu}>\r\n            <img className={s.avatar} src={avatar} alt={name} />\r\n            <span className={s.link}>Welcome, {name}</span>\r\n            <button className={s.headerBtn} type=\"button\" onClick={onLogout}>Logout</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    name: authSelectors.getUserName(state),\r\n    avatar: defaultAvatar,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    onLogout: authOperations.logout,\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserMenu);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { authSelectors } from '../../redux/auth';\r\nimport Navigation from './Navigation';\r\nimport AuthNav from './AuthNav';\r\nimport UserMenu from './UserMenu';\r\nimport s from './Navigation.module.css';\r\n\r\nconst AppBar = ({isAuthenticated}) => {\r\n    return (\r\n        <header className={s.header}>\r\n            <Navigation />\r\n            {isAuthenticated ? <UserMenu /> : <AuthNav />}\r\n        </header>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    isAuthenticated: authSelectors.getIsAuthenticated(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(AppBar);","import { Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { authSelectors } from '../redux/auth';\r\n\r\nconst PrivateRoute = ({\r\n    component: Component,\r\n    isAuthenticated,\r\n    redirectTo,\r\n    ...routeProps\r\n}) => (\r\n    <Route\r\n        {...routeProps}\r\n        render={props =>\r\n            isAuthenticated ? <Component {...props} /> : <Redirect to={redirectTo} />\r\n        }\r\n    />\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n    isAuthenticated: authSelectors.getIsAuthenticated(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(PrivateRoute);\r\n","import { Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { authSelectors } from '../redux/auth';\r\n\r\nconst PublicRoute = ({\r\n    component: Component,\r\n    isAuthenticated,\r\n    redirectTo,\r\n    ...routeProps\r\n}) => (\r\n    <Route\r\n        {...routeProps}\r\n        render={props =>\r\n            isAuthenticated && routeProps.restricted\r\n                ? <Redirect to={redirectTo} />\r\n                : <Component {...props} />\r\n        }\r\n    />\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n    isAuthenticated: authSelectors.getIsAuthenticated(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(PublicRoute);\r\n","import React, { Suspense, lazy } from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport PrivateRoute from './PrivateRoute';\r\nimport PublicRoute from './PublicRoute';\r\nimport routes from './routes';\r\n\r\nconst HomeView = lazy(() =>\r\n  import('../views/HomeView.js' /* webpackChunkName: \"home-page\" */),\r\n);\r\nconst RegisterView = lazy(() =>\r\n  import('../views/RegisterView.js' /* webpackChunkName: \"register-page\" */),\r\n);\r\nconst LoginView = lazy(() =>\r\n  import('../views/LoginView.js' /* webpackChunkName: \"login-page\" */),\r\n);\r\n\r\nconst ContactsView = lazy(() =>\r\n  import('../views/ContactsView.js' /* webpackChunkName: \"contacts-page\" */)\r\n);\r\n\r\nconst Router = () => {\r\n  return (\r\n    <Suspense fallback={<h1>Loading...</h1>}>\r\n        <Switch>\r\n            <PublicRoute path={routes.home} exact component={HomeView} />\r\n            <PublicRoute \r\n              path={routes.register}\r\n              restricted\r\n              redirectTo={routes.contacts} \r\n              component={RegisterView} \r\n            />\r\n            <PublicRoute\r\n              path={routes.login} \r\n              restricted \r\n              redirectTo={routes.contacts} \r\n              component={LoginView} \r\n            />\r\n            <PrivateRoute \r\n              path={routes.contacts} \r\n              component={ContactsView} \r\n              redirectTo={routes.login} \r\n            />\r\n      </Switch>\r\n    </Suspense>\r\n  );\r\n};\r\n\r\nexport default Router;","import React from 'react';\r\nimport s from './Container.module.css';\r\n\r\nexport default function Container({ children }) {\r\n  return (\r\n    <section className={s.section}>\r\n      <div className={s.mainContainer}>\r\n        {children}\r\n      </div>\r\n    </section>\r\n  )\r\n}","import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { authOperations } from './redux/auth';\nimport AppBar from './components/AppBar/AppBar';\nimport Router from './Router/Router';\nimport Container from './components/Container/Container';\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRefresh();\n  }\n\n  render() {\n    return (\n      <Container>\n        <AppBar />\n        <Router />\n      </Container>\n    );\n  }\n};\n\nconst mapDispatchToProps = {\n  onRefresh: authOperations.getCurrentUser,\n};\n\nexport default connect(null, mapDispatchToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport store from './redux/store';\nimport App from './App';\n\nimport 'modern-normalize/modern-normalize.css';\nimport './styles/index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nconst registerRequest = createAction('auth/registerRequest');\r\nconst registerSuccess = createAction('auth/registerSuccess');\r\nconst registerError = createAction('auth/registerError');\r\n\r\nconst loginRequest = createAction('auth/loginRequest');\r\nconst loginSuccess = createAction('auth/loginSuccess');\r\nconst loginError = createAction('auth/loginError');\r\n\r\nconst logoutRequest = createAction('auth/logoutRequest');\r\nconst logoutSuccess = createAction('auth/logoutSuccess');\r\nconst logoutError = createAction('auth/logoutError');\r\n\r\nconst getCurrentUserRequest = createAction('auth/getCurrentUserRequest');\r\nconst getCurrentUserSuccess = createAction('auth/getCurrentUserSuccess');\r\nconst getCurrentUserError = createAction('auth/getCurrentUserError');\r\n\r\nexport default {\r\n    registerRequest,\r\n    registerSuccess,\r\n    registerError,\r\n    loginRequest,\r\n    loginSuccess,\r\n    loginError,\r\n    logoutRequest,\r\n    logoutSuccess,\r\n    logoutError,\r\n    getCurrentUserRequest,\r\n    getCurrentUserSuccess,\r\n    getCurrentUserError,\r\n};","import axios from 'axios';\r\nimport authActions from './auth-actions';\r\n\r\naxios.defaults.baseURL = 'https://goit-phonebook-api.herokuapp.com';\r\n\r\nconst token = {\r\n    set(token) {\r\n        axios.defaults.headers.common.Authorization = `Bearer ${token}`;\r\n    },\r\n    unset() {\r\n        axios.defaults.headers.common.Authorization = '';\r\n    }\r\n}\r\n\r\nconst register = credentials => async dispatch => {\r\n    dispatch(authActions.registerRequest());\r\n\r\n    try {\r\n        const { data } = await axios.post('/users/signup', credentials);\r\n        token.set(data.token);\r\n        dispatch(authActions.registerSuccess(data));\r\n    } catch (error) {\r\n        dispatch(authActions.registerError(error.message));\r\n    };\r\n};\r\n\r\nconst login = credentials => async dispatch => {\r\n    dispatch(authActions.loginRequest());\r\n\r\n    try {\r\n        const { data } = await axios.post('/users/login', credentials);\r\n        token.set(data.token);\r\n        dispatch(authActions.loginSuccess(data));\r\n    } catch (error) {\r\n        dispatch(authActions.loginError(error.message));\r\n    };\r\n};\r\n\r\nconst logout = () => async dispatch => {\r\n    dispatch(authActions.logoutRequest());\r\n\r\n    try {\r\n        await axios.post('/users/logout');\r\n        token.unset();\r\n        dispatch(authActions.logoutSuccess());\r\n    } catch (error) {\r\n        dispatch(authActions.logoutError(error.message));\r\n    };\r\n};\r\n\r\nconst getCurrentUser = () => async (dispatch, getState) => {\r\n    const { auth: { token: persistedToken } } = getState();\r\n\r\n    if (!persistedToken) {\r\n        return;\r\n    }\r\n\r\n    token.set(persistedToken);\r\n    dispatch(authActions.getCurrentUserRequest());\r\n\r\n    try {\r\n        const { data } = await axios.get('/users/current');\r\n        console.log(data);\r\n        dispatch(authActions.getCurrentUserSuccess(data));\r\n    } catch (error) {\r\n        dispatch(authActions.getCurrentUserError(error.message));\r\n    }\r\n}\r\n\r\nexport default {\r\n    register,\r\n    login,\r\n    logout,\r\n    getCurrentUser,\r\n}","import { combineReducers } from \"redux\";\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport authActions from './auth-actions';\r\n\r\nconst initialUserState = { name: null, email: null };\r\n\r\nconst setUser = (_, { payload }) => payload.user;\r\nconst setToken = (_, { payload }) => payload.token;\r\nconst setError = (_, { payload }) => payload;\r\n\r\nconst user = createReducer(initialUserState, {\r\n    [authActions.registerSuccess]: setUser,\r\n    [authActions.loginSuccess]: setUser,\r\n    [authActions.logoutSuccess]: () => initialUserState,\r\n    [authActions.getCurrentUserSuccess]: (_, { payload }) => payload,\r\n});\r\n\r\nconst token = createReducer(null, {\r\n    [authActions.registerSuccess]: setToken,\r\n    [authActions.loginSuccess]: setToken,\r\n    [authActions.logoutSuccess]: () => null,\r\n});\r\n\r\nconst error = createReducer(null, {\r\n    [authActions.registerError]: setError,\r\n    [authActions.loginError]: setError,\r\n    [authActions.logoutError]: setError,\r\n    [authActions.getCurrentUserError]: setError,\r\n});\r\n\r\nconst isAuthenticated = createReducer(false, {\r\n    [authActions.registerSuccess]: () => true,\r\n    [authActions.loginSuccess]: () => true,\r\n    [authActions.getCurrentUserSuccess]: () => true,\r\n    [authActions.registerError]: () => false,\r\n    [authActions.loginError]: () => false,\r\n    [authActions.getCurrentUserError]: () => false,\r\n    [authActions.logoutSuccess]: () => false,\r\n});\r\n\r\nexport default combineReducers({\r\n    user,\r\n    token,\r\n    isAuthenticated,\r\n    error,\r\n});","const getIsAuthenticated = state => state.auth.isAuthenticated;\r\n\r\nconst getUserName = state => state.auth.user.name;\r\n\r\nconst getError = state => state.auth.error;\r\n\r\nexport default {\r\n    getIsAuthenticated,\r\n    getUserName,\r\n    getError\r\n}"],"sourceRoot":""}